% This script will load a full brain connectome and run life for a subject
% in which the right optic radiation has been identified.
% Franco Pestilli, Sam Faber, 2015-11-09

% Set up the paths to the data
HCPDIR = '/N/dc2/projects/lifebid/HCP/Sam/105115/';
BASEDIR = '/N/dc2/projects/lifebid/HCP/Sam/matlab_code/pestillilab_projects/sam_faber/optic_radiation/mrtrix_track_between_rois/105115/';
TRKDIR = fullfile(BASEDIR,'mrtrix_results');
CODEDIR = '/N/dc2/projects/lifebid/HCP/Sam/matlab_code/pestillilab_projects/virtual_lesion';
DWIDIR = '/N/dc2/projects/lifebid/HCP/Sam/105115/diffusion_data/dt6_b2000trilin';


%subjects = {...
%    '105115', ...
%    '110411', ...
%    '111312', ...
%    '113619', ...
%    '115320', ...
%    '117122', ...
%    '118730', ...
%    };

%DWIDIR = fullfile(BASEDIR, subjects);

%% Build the file names for the diffusion data, the anatomical MRI.
dwiFile = fullfile(BASEDIR, 'dwi_data_b2000_aligned_trilin.nii.gz');
t1File =  fullfile(BASEDIR,'T1w_acpc_dc_restore_1p25.nii.gz');

% Load the dt6 file
dt = dtiLoadDt6( fullfile(DWIDIR,'dt6.mat') );

% Load the ORs
fg1 = fgRead(fullfile(TRKDIR,'left_optic_radiation_PCSD_updated.mat'));
fg2 = fgRead(fullfile(TRKDIR,'right_optic_radiation_PCSD_updated.mat'));

% Clean the OR's
[fg1Clean, fibersToKeep] = mbaComputeFibersOutliers(fg1, 3, 3); 
[fg2Clean, fibersToKeep] = mbaComputeFibersOutliers(fg2, 3, 3);

% Load the whole brain connectome
fg3 = fgRead(fullfile(HCPDIR,'fibers','dwi_data_b2000_aligned_trilin_csd_lmax10_dwi_data_b2000_aligned_trilin_brainmask_dwi_data_b2000_aligned_trilin_wm_prob-500000.pdb'));

% Merge cleaned ORs with connectome
fg = fgMerge(fg1Clean, fg2Clean, 'OpticRadiationClean_merged_fullBrainConnectome.mat');

% Merge Dan's VOFs as fg


% Write the merged fibergroups out in case we need them?
fgWrite(fg,fullfile(CODEDIR,'/ORCleanVOF_merged_fullBrainConnectome.mat'));

% mbaDisplayConnectome(fg.fibers{randsample(1:500000,1000),figure}

%life demo
%% (1) Evaluate the Probabilistic CSD-based connectome.
% We will analyze first the CSD-based probabilistic tractography
% connectome.
prob.tractography = 'Probabilistic';
fgFileName    = fullfile(CODEDIR,'/ORCleanVOF_merged_fullBrainConnectome.mat');
                

% The final connectome and data astructure will be saved with this name:
feFileName    = 'ORCleanVOF_build_model_demo_CSD_PROB';

%% (1.1) Initialize the LiFE-BD model structure, 'fe' in the code below. 
% This structure contains the forward model of diffusion based on the
% tractography solution. It also contains all the information necessary to
% compute model accuracry, and perform statistical tests. You can type
% help('feBuildModel') in the MatLab prompt for more information.

N = 360; % Discretization parameter

mycomputer = computer();
release = version('-release');
switch strcat(mycomputer,'_',release)
        case {'GLNXA64_2015a','MACI64_2014b'}
        fe = feConnectomeInit(dwiFile,fgFileName,feFileName,[],dwiFile,t1File,N,[1,0],0);
        otherwise
        sprintf('WARNING: currently LiFE is optimized for an efficient usage of memory \n using the Sparse Tucker Decomposition aproach (Caiafa&Pestilli, 2015) \n ONLY for Linux (MatlabR2015a) and MacOS (MatlabR2014b). \n If you have a different system or version you can still \n use the old version of LiFE (memory intensive). \n\n')
        sprintf('\n Starting building big matrix M in OLD LiFE...\n')
        fe = feConnectomeInit(dwiFile,fgFileName,feFileName,[],dwiFile,t1File,N,[1,0],1);
end

%% (1.2) Fit the model. 
% Hereafter we fit the forward model of tracrography using a least-squared
% method. The information generated by fitting the model (fiber weights
% etc) is then installed in the LiFE-BD structure.

fe = feSet(fe,'fit',feFitModel(feGet(fe,'model'),feGet(fe,'dsigdemeaned'),'bbnnls'));

save(fullfile(CODEDIR,'/fe','fe_ORCleanVOFMergedFullBrain_CSD_PROB.mat'),'-struct','fe','-v7.3');

% %% (1.3) Extract the RMSE of the model on the fitted data set. 
% % We now use the LiFE-BD structure and the fit to compute the error in each
% % white-matter voxel spanned by the tractography model.
% prob.rmse   = feGet(fe,'vox rmse');
% 
% %% (1.6) Extract the fitted weights for the fascicles. 
% % The following line shows how to extract the weight assigned to each
% % fascicle in the connectome.
% prob.w      = feGet(fe,'fiber weights');


%% Prepare to create a virtual lesion of the ILF and OR
 
%addpath(genpath(fullfile('/N/dc2/projects/lifebid/HCP/Sam/matlab_code/')));

% lesion ILF
% find indices of ILF and give to feVirtualLesion

% lesion OR
% give indices of OR to feVirtualLesion

% calculate strength of evidence for actual - predicted in both cases 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Segment the fibers using AFQ
%dtFile    = fullfile(BASEDIR,'dt6.mat');
%wholeBrainConnectome = feGet(fe, 'fibers acpc'); % should this be the merged .mat file or the fe matrix?

% Segment the fascicles using AFQ
%[fascicles,classification,fg,fg_classified] = feAfqSegment(dtFile, wholeBrainConnectome);

% Load the fascicles
% for iFas = 1:length(fascicles)
%     fprintf('Identifying fascicles: %s...\n',classification.names{iFas})
%     
%     % Get the fibers for the current fascicle
%     fascicles2keep = find(classification.index==iFas);
%     
% end    
% 
% % Virtual Lesion
%   
% [se(isbj,iFas), fig] = feVirtualLesion(fe, fascicles2keep, display,false);

